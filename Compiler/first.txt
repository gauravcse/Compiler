expr -> [id]
factor -> [(]
factor -> [id, (]
factor -> [id, num, (]
term -> [id, num, (]
term -> [id, num, (]
R -> [id, num, (]
R -> [id, num, (]
expr -> [id, num, (]
expr -> [id, num, (]
optional_expr -> [id, num, (]
optional_expr -> [id, e$, num, (]
relop -> [>]
relop -> [>, <]
relop -> [>=, >, <]
relop -> [>=, >, <]
relop -> [<=, >=, >, <]
relop -> [<=, >=, >, <]
relop -> [==, <=, >=, >, <]
relop -> [==, <=, >=, >, =, <]
relop -> [==, <=, !=, >=, >, =, <]
type -> [int]
type -> [int, float]
sub_block -> [{]
sub_block -> [for, {]
sub_block -> [for, if, {]
sub_block -> [for, if, scan, {]
sub_block -> [for, if, scan, {, print]
sub_block -> [for, int, if, scan, {, float, print]
sub_block -> [id, for, int, if, scan, {, float, print]
sub_block -> [id, num, for, int, if, (, scan, {, float, print]
read_stmt -> [scan]
addop -> [+]
addop -> [+, -]
cmd_args -> [void]
cmd_args -> [e$, void]
multop -> [*]
multop -> [*, /]
multop -> [%, *, /]
assignop -> [=]
for_stmt -> [for]
declaration -> [int, float]
stmt -> [for]
if_stmt -> [if]
stmt -> [for, if]
stmt -> [for, if, scan]
write_stmt -> [print]
stmt -> [for, if, scan, print]
stmt -> [for, int, if, scan, print]
stmt -> [for, int, if, scan, float, print]
assignment -> [id]
stmt -> [id, for, int, if, scan, float, print]
stmt -> [id, num, for, int, if, (, scan, float, print]
id_decl -> [id]
id_decl -> [id]
ret_type -> [int]
ret_type -> [int, void]
id_list -> [id]
id_list -> [id]
main_func -> [id, num, (]
program -> [int, float]
program -> [id, num, int, (, float]
exe -> [id, num, for, if, int, scan, (, float, print]
exe -> [id, e$, num, for, if, int, scan, (, float, print]
