/*
 * created By : Gaurav Mitra
 * 
 * This Class is used to compute the first and follow for the Grammar 
 * 
 * */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class FirstFollow {
	
	// lookup : Saves the left recursion free grammar
	// first : Saves the first of each non Terminal
	// follow : Saves the follow of each non Terminal
	// nonTer : Set of non Terminals
	// terminal : Set of Terminals
	// g1 : Reads  left recursion free grammar from intermediate file.
	
	HashMap<String,Production> lookup = new HashMap<>();
	HashMap<String,Set<String>> first = new HashMap<String,Set<String>>();
	HashMap<String,Set<String>> follow = new HashMap<String,Set<String>>();
	Set<String> nonTer;
	Set<String> terminal;
	Grammar g1;
	
	// Constructor
	
	public FirstFollow() throws NullPointerException, IOException {
		g1 = new Grammar("program_ll.txt");
		g1.storeMap(lookup);
		nonTer  = new HashSet<>(g1.nonTerminals);
		File file = new File("terminal.txt");
		FileReader fr = new FileReader(file);
		BufferedReader br = new BufferedReader(fr);
		String line = br.readLine();
		ArrayList<String> t = new ArrayList<String>(Arrays.asList(line.split(",")));
		terminal = new HashSet<String>(t);
		terminal.add(",");
		br.close();
	}
	
	// Function to compute First of a non Terminal
	
	public void computeFirst(String current) {
		//System.out.println(current);
		if(first.containsKey(current))
			return;
		else {
			Set<String> forcurrent = new HashSet<String>();
			for(int i = 0; i < lookup.get(current).productions.size(); i++) {
				Iterator<String> iter = nonTer.iterator();
				String p1 = lookup.get(current).productions.get(i);
				int p1size = p1.length();
				boolean has_non_T = false;
				while(iter.hasNext()) {
					String cur_nonT = iter.next();
					int cur_nonT_size = cur_nonT.length();
					if(p1size >=  cur_nonT_size) {
						String start = p1.substring(0,cur_nonT_size);
						if(start.equalsIgnoreCase(cur_nonT)) {
							if(!first.containsKey(cur_nonT)) {
								computeFirst(cur_nonT);
							}
							//System.out.println("Non t :" + cur_nonT);
							forcurrent.addAll(first.get(cur_nonT));
				//			System.out.println(current + " -> " + forcurrent.toString());
							has_non_T = true;
							break;
						}
					}
				}
				if(!has_non_T) {
					//System.out.println("NonTermianl : " + current);
					iter = terminal.iterator();
					while(iter.hasNext()) {
						String cur_T = iter.next();
						int cur_T_size = cur_T.length();
						if(p1size >=  cur_T_size) {
							String start = p1.substring(0,cur_T_size);
							if(start.equals(cur_T)) {
								forcurrent.add(cur_T);
			//					System.out.println(current + " -> " + forcurrent.toString());
							}
						}
					}
				}
			}
			first.put(current, forcurrent);
		}
	}
	
	//// Function to compute Follow of a non Terminal
	
	public void computeFollow(String current) {
		System.out.println("\n\nCurrent : " + current);
		int cur_l = current.length();
		Set<String> curFollow = new HashSet<>();
		Iterator<String> iter = nonTer.iterator();
		while(iter.hasNext()) {
			
			String curNonTer = iter.next();
			
			System.out.println("\ncurrent Non Terminal  :" + curNonTer);
			
			for(int i = 0; i < lookup.get(curNonTer).productions.size();i++) {
				String p1 = lookup.get(curNonTer).productions.get(i);
				
				System.out.println("Production : " + p1);
				
				int p1size = p1.length();
				if(cur_l > p1size)
					continue;
				else {
					int position = p1.indexOf(current);
					System.out.println("Pos : " + position);
					if(position == -1)
						continue;
					
					position += cur_l;
					String rest = p1.substring(position).trim();
					
					System.out.println("Rest : " + rest);
					
					if(rest.length() > 0) {
						/*String ter = checkTerminal(rest);
						if(ter != null) {
							System.out.println("\n\nIt is Terminal" + ter);
							curFollow.add(ter.trim());
						}
						else {
							ter = checkNonTerminal(rest);
							System.out.println("\n\nIt is NonTerminal" + ter);
							if(!follow.containsKey(ter) && ter != null) {
								System.out.println("Computing Follow of : " + ter);
								computeFollow(ter);
							}
							if(!first.get(ter).contains("e$"))
								curFollow.addAll(first.get(ter));
							else {
								curFollow.addAll(follow.get(ter));
							}
						}*/
						
						String ter = checkNonTerminal(rest);
						if(ter != null) {
							System.out.println("\n\nIt is NonTerminal" + ter);
							if(!follow.containsKey(ter) && ter != null) {
								System.out.println("Computing Follow of : " + ter);
								computeFollow(ter);
							}
							if(!first.get(ter).contains("e$"))
								curFollow.addAll(first.get(ter));
							else {
								curFollow.addAll(follow.get(ter));
							}
						}
						else {
							ter = checkTerminal(rest);
							if(ter != null) {
								System.out.println("\n\nIt is Terminal" + ter);
								curFollow.add(ter.trim());
							}
						}
					}
				}		
			}
		}
		follow.put(current, curFollow);
	}
	
	// Helper function to check for terminals in a production
	
	public String checkTerminal(String s) {
		s = s.trim();
		Iterator<String> iter = terminal.iterator();
		while(iter.hasNext()) {
			String start = iter.next();
			if(s.startsWith(start))
				return start;
		}
		return null;
	}
	
	// Helper function to check for non terminals in a production
	
	public String checkNonTerminal(String s) {
		s = s.trim();
		Iterator<String> iter = nonTer.iterator();
		while(iter.hasNext()) {
			String start = iter.next();
			if(s.startsWith(start))
				return start;
		}
		return null;
	}
	
	// Parent function  to compute first of all Non terminals
	
	public void computeFirstOfGrammar() {
		Iterator<String> iter = nonTer.iterator();
		while(iter.hasNext()) {
			computeFirst(iter.next());
		}
	}
	
	
	public void printFirst() {
		Set<String> main_set = new HashSet<>(Arrays.asList("int","void"));
		Set<String> prog_set = new HashSet<>(Arrays.asList("int","float"));
		Iterator<String> iter = nonTer.iterator();
		while(iter.hasNext()) {
			String cur = iter.next();
			if(cur.equals("main_func")) {
				//System.out.print("Visited\n");
				first.put(cur, main_set);
			}
			if(cur.equals("program")) {
				first.put(cur, prog_set);
			}
			System.out.println(cur + " -> " + first.get(cur).toString());
		}
	}
	
	// Prints follow set
	
	public void printFollow() {
		System.out.println("\n\n\n\n FOLLOW");
		Iterator<String> iter = nonTer.iterator();
		while(iter.hasNext()) {
			String cur = iter.next();
			System.out.println(cur + " -> " + follow.get(cur).toString());
		}
	}
	
	// Parent function  to compute first and follow
	
	public void computeAll() {
		computeFirstOfGrammar();
		printFirst();
		Iterator<String> iter = nonTer.iterator();
		while(iter.hasNext()) {
			String str = iter.next();
			if(!follow.containsKey(str))
				computeFollow(str);
		}
		printFollow();
	}
	
	/*public static void main(String [] args) throws NullPointerException, IOException {
		FirstFollow f = new FirstFollow();
		f.computeFirstOfGrammar();
		//f.printFirst();
		Iterator<String> iter = f.nonTer.iterator();
		while(iter.hasNext()) {
			String str = iter.next();
			if(!f.follow.containsKey(str))
			f.computeFollow(str);
		}
		//f.printFollow();
	}*/
}
